" remove all existing autocmds
autocmd!

" Keep Plug commands between plug#begin() and plug#end().
call plug#begin()
Plug 'sheerun/vim-polyglot'
" Plug 'jparise/vim-graphql'        " GraphQL syntax
" Plug 'elixir-lang/vim-elixir'     " Elixir syntax
" Plug 'styled-components/vim-styled-components'

" Plug 'itchyny/lightline.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'TaDaa/vimade'                 " Fade out inactive buffers
Plug 'tpope/vim-fugitive'           " :Gblame
Plug 'vim-scripts/delimitMate.vim'  " Auto close of tags
Plug 'airblade/vim-gitgutter'       " Show git diff of lines edited
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf.vim'           " Set up fzf and fzf.vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'neoclide/coc.nvim' , { 'branch' : 'release' }
Plug 'preservim/nerdcommenter'
Plug 'tpope/vim-surround'
" Plug 'tpope/vim-dispatch'
" Plug 'mg979/vim-visual-multi', {'branch': 'master'}
"
" THEMES
" Plug 'haishanh/night-owl.vim'
" Plug 'jonathanfilip/vim-lucius'
Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()


" ================ 1. CONFIG ======================
syntax on
filetype plugin indent on       " https://vi.stackexchange.com/questions/10124/what-is-the-difference-between-filetype-plugin-indent-on-and-filetype-indent
colorscheme dracula " Editor theme
set guifont=MonoLisa:h14      " Font

" File extension map to filetype overrides
au BufRead,BufNewFile *.jsx set filetype=javascript.jsx
au BufRead,BufNewFile *.tsx set filetype=typescript.tsx

set encoding=utf-8              " Presentation encoding
set termencoding=utf-8          " Keyboard encoding
set clipboard=unnamed           " Allow copy paste from system clipboard

" File swap / backup settings
set nobackup                    " No backup files
set nowritebackup               " No backups while editing
set noswapfile                  " No swap files

set history=1000                " Store lots of :cmdline history
set visualbell                  " No sounds
" set colorcolumn=80              " Column width border
set laststatus=2                " Always show status line
set wrap!                       " Turn off wrapping of text
set nu rnu                      " Line numbers
set backspace=indent,eol,start  " Backspace settings

" Indentation settings
set smartindent                 " No idea how this works
set autoindent                  " Keep indentation for next line
set shiftwidth=2                " Indendation step for << and >>
set expandtab                   " Convert tabs to spaces on <TAB>
set tabstop=2                   " Width of <TAB>

" Search settings
set ignorecase                  " Case insensitivity search
set smartcase                   " Skip ignore case when search contains capitals
set incsearch                   " Incremental search - results as you type

set hidden                      " Hide buffer with unsaved changes without warning
set updatetime=300              " Default updatetime leads to delays (CoC)

let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-eslint',
  \ 'coc-json',
  \ 'coc-phpls',
  \ 'coc-prettier',
  \ 'coc-rls',
  \ 'coc-graphql',
  \ 'coc-snippets',
  \ 'coc-tsserver'
  \ ]

let g:fzf_layout = { 'down': '40%' }
let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'

" NERDTree
let NERDTreeAutoDeleteBuffer=1  " Close a deleted files buffer
let NERDTreeDirArrows=1         " Tree directory arrows
let NERDTreeMinimalUI=1         " Hide bookmarks label
let NERDTreeQuitOnOpen=1        " Close NERDTree after opening file
let NERDTreeShowHidden=1        " Show hidden files
let g:NERDTreeWinSize=60        " Width of sidebar

" airline
let g:airline_symbols_ascii = 1
let g:airline_theme = 'dracula'
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline_section_y = ''
" let g:airline_left_sep = ' â˜… '
"

" ================ 2. BEHAVIOR ======================
set splitbelow
set splitright

" Delete empty space from the end of lines on every save
autocmd BufWritePre * :%s/\s\+$//e

" FZF default search command
let $FZF_DEFAULT_COMMAND="rg --files --follow --hidden --glob '!{node_modules/*,.git/*,dist/*}'"

" RipGrep search override to add glob over fzf definition
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case --glob ''!yarn.lock'' --glob ''!test.ndjson'' --glob ''!README.md'' -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Set RipGrep root to working directory
if executable('rg')
  let g:rg_derive_root='true'
endif

" CoC - signcolumn to avoid layout change when checking lints and stuff
if has("patch-8.1.1564")
  set signcolumn=auto" Recently vim can merge signcolumn and number column into one
else
  set signcolumn=yes
endif


" ================ 3. KEYMAPS ======================

nnoremap <space> <nop>
let mapleader=" "

" nnoremap <leader>b :buffers<cr>:b<space>
nnoremap <leader>b :Buffers<cr>

" FZF
nnoremap <c-p> :Files<cr>
nnoremap <leader>t :BTags<cr>
nnoremap <leader>T :Tags<cr>
nnoremap <leader>l :Lines<cr>
nnoremap <silent> <leader>x :Commits<cr>
nnoremap <silent> <leader>rg :Rg<cr>

" NERDTree
nnoremap <leader>ft :NERDTreeToggle<Enter>
nnoremap <leader>ff :NERDTreeFind<Enter>

" CoC Suggestions
inoremap <silent><expr> <c-Space> coc#refresh()
inoremap <expr> <c-j> pumvisible() ? "\<c-n>" : "\<c-j>"
inoremap <expr> <c-k> pumvisible() ? "\<c-p>" : "\<c-k>"
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<c-g>u\<cr>"

" CoC Actions
nnoremap <silent>K :call <sid>show_documentation()<cr>
nmap <leader>sd :CocDiagnostics<cr>
nmap <leader>as <plug>(coc-codeaction-selected)
nmap <leader>ac <plug>(coc-codeaction)
nmap <leader>qf <plug>(coc-fix-current)
nmap <leader>rn <plug>(coc-rename)

" CoC Go to
nmap <silent>gd <plug>(coc-definition)
nmap <silent>gy <plug>(coc-type-definition)
nmap <silent>gi <plug>(coc-implementation)
nmap <silent>gr <plug>(coc-references)

" CoC Snippets
imap <c-l> <plug>(coc-snippets-expand)
vmap <c-j> <plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

" Save and exit shortcuts
nnoremap <silent><leader>w :w!<cr>
nnoremap <silent><leader>q :q!<cr>

" File open / close shortcuts
nnoremap <silent><leader>bd :bd<cr>
nnoremap <silent><leader>1 :source ~/.vimrc \| :PlugInstall<CR>
nnoremap <silent><leader>2 :e ~/.vimrc<cr>
nnoremap <silent><leader>3 :e ~/.guivimrc<cr>
nnoremap <silent><leader>4 :e ~/.vim-cheatsheet.md<cr>

" Window splits
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
nnoremap <c-l> <c-w><c-l>
nnoremap <c-h> <c-w><c-h>
" Close all other splits
nnoremap <leader>o :only<cr>

" Move lines in normal mode
nnoremap <c-j> :m .+1<cr>==
nnoremap <c-k> :m .-2<cr>==

" Move lines in visual mode
vnoremap <c-j> :m '>+1<cr>gv=gv
vnoremap <c-k> :m '<-2<cr>gv=gv


" ================ 4. UTILS ======================

" Used by CoC
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" MULTIPURPOSE TAB KEY
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col
        return "\<tab>"
    endif

    let char = getline('.')[col - 1]
    if char =~ '\k'
        " There's an identifier before the cursor, so complete the identifier.
        return "\<c-p>"
    else
        return "\<tab>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

